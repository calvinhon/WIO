# Credit Card Assistant - Complete Setup Guide

## 🚀 Quick Start (3-4 Days Implementation)

### Prerequisites
- Node.js 14+ installed
- Basic terminal/command line knowledge
- Text editor (VS Code recommended)

### Project Structure
```
credit-card-assistant/
├── server.js                 # Main Express server
├── package.json              # Project dependencies
├── .env                      # Environment variables
├── lib/
│   ├── sms-parser.js         # SMS parsing logic
│   └── database.js           # Database operations
├── public/
│   └── dashboard.html        # Web interface
├── data/                     # File storage (auto-created)
│   ├── bills.json
│   └── transactions.json
└── test/
    └── test-parser.js        # Test scripts
```

## 📋 Step-by-Step Setup

### Step 1: Project Initialization (10 minutes)

1. **Create project directory:**
```bash
mkdir credit-card-assistant
cd credit-card-assistant
```

2. **Initialize Node.js project:**
```bash
npm init -y
```

3. **Install dependencies:**
```bash
npm install express cors mongodb dotenv
npm install --save-dev nodemon eslint
```

### Step 2: Create Project Files (30 minutes)

1. **Create directory structure:**
```bash
mkdir lib public data test
```

2. **Create the main files:**
   - Copy `server.js` code to `server.js`
   - Copy `SMS Parser` code to `lib/sms-parser.js`
   - Copy `Database Handler` code to `lib/database.js`
   - Copy `Dashboard HTML` code to `public/dashboard.html`
   - Copy `Package.json` content to `package.json`

3. **Create environment file:**
```bash
touch .env
```

Add to `.env`:
```
PORT=3000
MONGODB_URI=mongodb://localhost:27017/creditcard_assistant
NODE_ENV=development
```

### Step 3: Setup Database (Choose One)

#### Option A: File Storage (Recommended for Testing)
- No additional setup needed
- Data stored in `data/bills.json` and `data/transactions.json`
- Perfect for development and testing

#### Option B: MongoDB (Production Ready)
```bash
# Install MongoDB locally (Ubuntu/Debian)
sudo apt update
sudo apt install mongodb

# Start MongoDB
sudo systemctl start mongodb
sudo systemctl enable mongodb

# Or use MongoDB Atlas (cloud)
# 1. Go to https://www.mongodb.com/atlas
# 2. Create free account
# 3. Create cluster
# 4. Get connection string
# 5. Update MONGODB_URI in .env
```

### Step 4: Run the Application (5 minutes)

1. **Start the server:**
```bash
npm start
```

2. **For development (auto-restart):**
```bash
npm run dev
```

3. **Open your browser:**
- Dashboard: http://localhost:3000
- API Health: http://localhost:3000/health

## 🧪 Testing Your Setup

### Test 1: API Health Check
```bash
curl http://localhost:3000/health
```
Expected response:
```json
{"status":"OK","timestamp":"2024-01-15T10:30:00.000Z"}
```

### Test 2: Load Sample Data
1. Open http://localhost:3000
2. Click "Load Test Data" button
3. Check if bills appear in the dashboard

### Test 3: SMS Parser
1. In the dashboard, paste this SMS:
```
HDFC Bank: Your credit card bill of Rs.15,000 is due on 15/01/2024. Please pay before the due date.
```
2. Click "Parse SMS"
3. Check if it's parsed correctly

### Test 4: API Endpoints
```bash
# Get all bills
curl http://localhost:3000/api/bills

# Parse SMS via API
curl -X POST http://localhost:3000/api/sms/parse \
  -H "Content-Type: application/json" \
  -d '{"messages":[{"text":"HDFC Bank: Your credit card bill of Rs.5000 is due on 15/01/2024","sender":"HDFC"}]}'
```

## 📱 Usage Guide

### Dashboard Features
1. **Stats Overview**: See pending/paid bills and amounts
2. **Filter Bills**: By status (pending/paid) or bank
3. **Mark as Paid**: Update bill status
4. **Test SMS Parser**: Test with your own SMS messages
5. **Auto-refresh**: Dashboard updates every 30 seconds

### API Endpoints
- `GET /api/bills` - Get all bills
- `POST /api/sms/parse` - Parse SMS messages
- `PUT /api/bills/:id/status` - Update bill status
- `GET /api/dashboard` - Get dashboard statistics
- `POST /api/test` - Load test data

### SMS Format Examples
The parser recognizes these formats:
```
HDFC Bank: Your credit card bill of Rs.15,000 is due on 15/01/2024
SBI Card: Minimum amount due Rs.5,500 on your card ending 1234. Due date: 20/01/2024
Payment successful! Rs.15,000 has been debited for HDFC credit card bill
ICICI Bank: Your credit card statement is ready. Total amount due: Rs.8,750. Due date: 18/01/2024
```

## 🔧 Customization

### Adding New Banks
Edit `lib/sms-parser.js`:
```javascript
this.bankPatterns = {
    'HDFC': /existing pattern/,
    'YOUR_BANK': /YOUR_BANK.*bill.*Rs\.?\s*(\d+).*due.*(\d{1,2}[-\/]\d{1,2}[-\/]\d{2,4})/i
};
```

### Changing Port
Update `.env`:
```
PORT=8080
```

### Adding User Authentication
1. Install `passport` and `express-session`
2. Add authentication middleware to routes
3. Update database schema to include user sessions

## 🚀 Deployment Options

### Option 1: Local Development
```bash
npm start
```

### Option 2: Railway (Free Tier)
1. Push code to GitHub
2. Connect Railway to your repo
3. Deploy automatically

### Option 3: Heroku
```bash
# Install Heroku CLI
heroku create your-app-name
git push heroku main
```

### Option 4: VPS/Cloud Server
```bash
# Install PM2 for production
npm install -g pm2
pm2 start server.js --name credit-card-assistant
pm2 save
pm2 startup
```

## 📊 Monitoring & Logs

### View Logs
```bash
# With PM2
pm2 logs credit-card-assistant

# Without PM2
tail -f logs/app.log
```

### Monitor Performance
```bash
# Check server status
curl http://localhost:3000/health

# Monitor bills count
curl http://localhost:3000/api/dashboard
```

## 🔒 Security Considerations

1. **Environment Variables**: Never commit `.env` to version control
2. **Input Validation**: All SMS inputs are sanitized
3. **Rate Limiting**: Consider adding rate limiting for production
4. **HTTPS**: Use HTTPS in production
5. **Database Security**: Use authentication for MongoDB

## 🐛 Troubleshooting

### Common Issues

1. **Port Already in Use**
```bash
# Kill process on port 3000
kill -9 $(lsof -t -i:3000)
```

2. **MongoDB Connection Failed**
- Check if MongoDB is running
- Verify connection string in `.env`
- Check firewall settings

3. **SMS Not Parsing**
- Check console logs for pattern matching
- Verify SMS format against regex patterns
- Add debug logs to parser

4. **Dashboard Not Loading**
- Check browser console for JavaScript errors
- Verify API endpoints are responding
- Check server logs for errors

### Debug Mode
Add to `.env`:
```
NODE_ENV=development
DEBUG=true
```

## 📈 Next Steps (After Basic Setup)

1. **Email Integration**: Add n8n for PDF statement parsing
2. **Mobile App**: React Native app for mobile SMS parsing
3. **AI Features**: Add ML for better SMS pattern recognition
4. **Notifications**: Add email/SMS alerts for due dates
5. **Analytics**: Add spending analytics and insights

## 🎯 Success Metrics

After completing setup, you should have:
- ✅ Working SMS parser with 90%+ accuracy
- ✅ Web dashboard showing bills and stats
- ✅ API endpoints for integration
- ✅ File or database storage working
- ✅ Test data loading successfully

## 📞 Support

If you encounter issues:
1. Check the troubleshooting section
2. Review server logs
3. Test individual components
4. Verify all dependencies are installed

Your credit card assistant should now be running successfully! 🎉
